// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperjumptech/grule-rule-engine/ast (interfaces: IDataContext)

// Package mocksAst is a generated GoMock package.
package mocksAst

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/hyperjumptech/grule-rule-engine/ast"
)

var _ ast.IDataContext = &MockIDataContext{}

// MockIDataContext is a mock of IDataContext interface
type MockIDataContext struct {
	ctrl     *gomock.Controller
	recorder *MockIDataContextMockRecorder
}

// MockIDataContextMockRecorder is the mock recorder for MockIDataContext
type MockIDataContextMockRecorder struct {
	mock *MockIDataContext
}

// NewMockIDataContext creates a new mock instance
func NewMockIDataContext(ctrl *gomock.Controller) *MockIDataContext {
	mock := &MockIDataContext{ctrl: ctrl}
	mock.recorder = &MockIDataContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataContext) EXPECT() *MockIDataContextMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockIDataContext) Add(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockIDataContextMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIDataContext)(nil).Add), arg0, arg1)
}

// ExecMethod mocks base method
func (m *MockIDataContext) ExecMethod(arg0 string, arg1 []reflect.Value) (reflect.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecMethod", arg0, arg1)
	ret0, _ := ret[0].(reflect.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecMethod indicates an expected call of ExecMethod
func (mr *MockIDataContextMockRecorder) ExecMethod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecMethod", reflect.TypeOf((*MockIDataContext)(nil).ExecMethod), arg0, arg1)
}

// GetType mocks base method
func (m *MockIDataContext) GetType(arg0 string) (reflect.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType", arg0)
	ret0, _ := ret[0].(reflect.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetType indicates an expected call of GetType
func (mr *MockIDataContextMockRecorder) GetType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIDataContext)(nil).GetType), arg0)
}

// GetValue mocks base method
func (m *MockIDataContext) GetValue(arg0 string) (reflect.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0)
	ret0, _ := ret[0].(reflect.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue
func (mr *MockIDataContextMockRecorder) GetValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockIDataContext)(nil).GetValue), arg0)
}

// HasVariableChange mocks base method
func (m *MockIDataContext) HasVariableChange() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasVariableChange")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasVariableChange indicates an expected call of HasVariableChange
func (mr *MockIDataContextMockRecorder) HasVariableChange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasVariableChange", reflect.TypeOf((*MockIDataContext)(nil).HasVariableChange))
}

// IncrementVariableChangeCount mocks base method
func (m *MockIDataContext) IncrementVariableChangeCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementVariableChangeCount")
}

// IncrementVariableChangeCount indicates an expected call of IncrementVariableChangeCount
func (mr *MockIDataContextMockRecorder) IncrementVariableChangeCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementVariableChangeCount", reflect.TypeOf((*MockIDataContext)(nil).IncrementVariableChangeCount))
}

// IsRetracted mocks base method
func (m *MockIDataContext) IsRetracted(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetracted", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetracted indicates an expected call of IsRetracted
func (mr *MockIDataContextMockRecorder) IsRetracted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetracted", reflect.TypeOf((*MockIDataContext)(nil).IsRetracted), arg0)
}

// Reset mocks base method
func (m *MockIDataContext) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset
func (mr *MockIDataContextMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockIDataContext)(nil).Reset))
}

// ResetVariableChangeCount mocks base method
func (m *MockIDataContext) ResetVariableChangeCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetVariableChangeCount")
}

// ResetVariableChangeCount indicates an expected call of ResetVariableChangeCount
func (mr *MockIDataContextMockRecorder) ResetVariableChangeCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetVariableChangeCount", reflect.TypeOf((*MockIDataContext)(nil).ResetVariableChangeCount))
}

// Retract mocks base method
func (m *MockIDataContext) Retract(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Retract", arg0)
}

// Retract indicates an expected call of Retract
func (mr *MockIDataContextMockRecorder) Retract(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retract", reflect.TypeOf((*MockIDataContext)(nil).Retract), arg0)
}

// Retracted mocks base method
func (m *MockIDataContext) Retracted() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retracted")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Retracted indicates an expected call of Retracted
func (mr *MockIDataContextMockRecorder) Retracted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retracted", reflect.TypeOf((*MockIDataContext)(nil).Retracted))
}

// SetValue mocks base method
func (m *MockIDataContext) SetValue(arg0 string, arg1 reflect.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValue indicates an expected call of SetValue
func (mr *MockIDataContextMockRecorder) SetValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockIDataContext)(nil).SetValue), arg0, arg1)
}

// Complete mocks base method
func (m *MockIDataContext) Complete() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Complete")
}

// Complete indicates an expected call of Complete
func (mr *MockIDataContextMockRecorder) Complete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockIDataContext)(nil).Complete))
}

// IsComplete mocks base method
func (m *MockIDataContext) IsComplete() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsComplete")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsComplete indicates an expected call of IsComplete
func (mr *MockIDataContextMockRecorder) IsComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsComplete", reflect.TypeOf((*MockIDataContext)(nil).IsComplete))
}
